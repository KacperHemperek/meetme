import { XIcon } from "lucide-react";
import Head from "next/head";
import Image from "next/image";
import { useRef, useState } from "react";
import { Map, Marker, Popup, type MapRef, useMap } from "react-map-gl";
import MapFabGroup from "~/components/map-fab-group";
import { env } from "~/env.mjs";
import type { MeetingWithLocation } from "~/server/api/routers/meetings";
import { api } from "~/utils/api";

const MAP_FLY_TO_LAT_OFFSET = 0.005;

function useSafeMap() {
  const map = useMap();

  if (!map.current) {
    throw new Error("use map needs to be called inside a map component");
  }

  return map.current;
}

function MarkerWithPopup({
  data,
  selectedMarkerId,
  setSelectedMarkerId,
}: {
  data: MeetingWithLocation;
  selectedMarkerId: string | null;
  setSelectedMarkerId: (val: string | null) => void;
}) {
  const map = useSafeMap();
  const markerIsSelected = selectedMarkerId === data.id;

  function openPopupAndZoomOnMarker() {
    setSelectedMarkerId(data.id);
    map.flyTo({
      center: [
        data.location.coordinates[1]!,
        data.location.coordinates[0]! + MAP_FLY_TO_LAT_OFFSET,
      ] as [number, number],
      zoom: 14,
    });
  }

  function closePopup() {
    setSelectedMarkerId(null);
  }

  return (
    <>
      <Marker
        latitude={data.location.coordinates[0]!}
        longitude={data.location.coordinates[1]!}
        onClick={openPopupAndZoomOnMarker}
      >
        <div className="cursor-pointer rounded-full border-4 border-slate-50 bg-emerald-500 p-2 text-slate-50"></div>
      </Marker>
      {markerIsSelected && (
        <Popup
          onClose={closePopup}
          closeButton={false}
          closeOnClick={false}
          closeOnMove={false}
          latitude={data.location.coordinates[0]!}
          longitude={data.location.coordinates[1]!}
          offset={12}
          maxWidth="none"
          anchor="bottom"
        >
          <div className="flex w-80 flex-col">
            <div className="rounded-t-inherit relative h-16 w-full overflow-hidden rounded-t-lg">
              <Image
                src={"http://localhost:4200/api/images/portfolio_thumbnail.png"}
                fill
                objectFit="cover"
                alt="A background image of a meeting"
              />

              <button
                onClick={closePopup}
                className="absolute right-1 top-1 z-10 rounded-md bg-stone-950 p-0.5 backdrop-blur-sm"
              >
                <XIcon className="h-5 w-5 " />
              </button>
            </div>
            <div className="p-4">
              <h3 className="text-lg font-semibold">{data.title}</h3>
              {data.description}
            </div>
          </div>
        </Popup>
      )}
    </>
  );
}

export default function Home() {
  const { data, isLoading } = api.meetings.getAll.useQuery();
  const [mapLoaded, setMapLoaded] = useState(false);
  const [selectedMarker, setSelectedMarker] = useState<string | null>(null);
  const mapRef = useRef<MapRef>(null);

  const canShowMarkers = mapLoaded && !isLoading && data;

  return (
    <>
      <Head>
        <title>Meetme</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen">
        <div className="flex w-2/5 flex-col bg-stone-950 p-8 text-slate-50">
          <h1>Meetings</h1>
          <div className="flex flex-col"></div>
        </div>
        <MapFabGroup />
        <div className="w-3/5">
          <Map
            ref={mapRef}
            mapboxAccessToken={env.NEXT_PUBLIC_MAPBOX_TOKEN}
            mapStyle="mapbox://styles/mapbox/dark-v11"
            onLoad={() => setMapLoaded(true)}
          >
            {canShowMarkers &&
              data.map((markerData) => (
                <MarkerWithPopup
                  key={markerData.id}
                  data={markerData}
                  setSelectedMarkerId={setSelectedMarker}
                  selectedMarkerId={selectedMarker}
                />
              ))}
          </Map>
        </div>
      </main>
    </>
  );
}
